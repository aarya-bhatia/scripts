!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/aarya/dotfiles/scripts/bulkrename/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(OBJDIR)/%.o	Makefile	/^$(OBJDIR)\/%.o: src\/%.c$/;"	t
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-std=gnu99 -Wall -Wextra -Wno-pointer-arith -pedantic -gdwarf-4 -MMD -MP -O0 -D_GNU_SOURC/;"	m
CstrToString	src/Aarya/astring.c	/^string_t *CstrToString(char *cstr) {$/;"	f	typeref:typename:string_t *
DEFAULT_CAPACITY	src/Aarya/common.h	/^#define DEFAULT_CAPACITY /;"	d
FILES	Makefile	/^FILES=$(shell find src\/Aarya -type f -name "*.c")$/;"	m
HASHTABLE_FOR_EACH	src/Aarya/hashtable.h	/^#define HASHTABLE_FOR_EACH(/;"	d
HTNode	src/Aarya/hashtable.h	/^typedef struct HTNode {$/;"	s
HTNode	src/Aarya/hashtable.h	/^} HTNode;$/;"	t	typeref:struct:HTNode
HT_DENSITY	src/Aarya/hashtable.h	/^#define HT_DENSITY /;"	d
HT_INITIAL_CAPACITY	src/Aarya/hashtable.h	/^#define HT_INITIAL_CAPACITY /;"	d
Hashtable	src/Aarya/hashtable.h	/^typedef struct Hashtable {$/;"	s
Hashtable	src/Aarya/hashtable.h	/^} Hashtable;$/;"	t	typeref:struct:Hashtable
HashtableIter	src/Aarya/hashtable.h	/^typedef struct HashtableIter {$/;"	s
HashtableIter	src/Aarya/hashtable.h	/^} HashtableIter;$/;"	t	typeref:struct:HashtableIter
INCLUDES	Makefile	/^INCLUDES=-Isrc -Isrc\/Aarya$/;"	m
INITIAL_CAPACITY	src/Aarya/astring.h	/^#define INITIAL_CAPACITY /;"	d
LOGLEVEL	src/Aarya/log.h	/^#define LOGLEVEL /;"	d
MAX	src/Aarya/common.h	/^#define MAX(/;"	d
MIN	src/Aarya/common.h	/^#define MIN(/;"	d
NDEBUG	src/Aarya/log.h	/^#define NDEBUG /;"	d
OBJ	Makefile	/^OBJ=$(FILES:src\/%.c=$(OBJDIR)\/%.o)$/;"	m
OBJDIR	Makefile	/^OBJDIR=.obj$/;"	m
StringAdd	src/Aarya/astring.c	/^void StringAdd(string_t *this, char c) {$/;"	f	typeref:typename:void
StringAddCstr	src/Aarya/astring.c	/^void StringAddCstr(string_t *this, char *cstr) {$/;"	f	typeref:typename:void
StringAppend	src/Aarya/astring.c	/^void StringAppend(string_t *this, const string_t *other) {$/;"	f	typeref:typename:void
StringCapacity	src/Aarya/astring.c	/^size_t StringCapacity(const string_t *this) { return this->capacity; }$/;"	f	typeref:typename:size_t
StringConstructor	src/Aarya/astring.c	/^string_t *StringConstructor(size_t n) {$/;"	f	typeref:typename:string_t *
StringDefaultConstructor	src/Aarya/astring.c	/^string_t *StringDefaultConstructor() {$/;"	f	typeref:typename:string_t *
StringDestructor	src/Aarya/astring.c	/^void StringDestructor(string_t *this) {$/;"	f	typeref:typename:void
StringReserve	src/Aarya/astring.c	/^void StringReserve(string_t *this, size_t capacity) {$/;"	f	typeref:typename:void
StringResize	src/Aarya/astring.c	/^void StringResize(string_t *this, size_t size) {$/;"	f	typeref:typename:void
StringSize	src/Aarya/astring.c	/^size_t StringSize(const string_t *this) { return this->size; }$/;"	f	typeref:typename:size_t
StringSlice	src/Aarya/astring.c	/^char *StringSlice(string_t *this, size_t start, size_t end) {$/;"	f	typeref:typename:char *
StringToCstr	src/Aarya/astring.c	/^char *StringToCstr(string_t *this) {$/;"	f	typeref:typename:char *
StringWrite	src/Aarya/astring.c	/^void StringWrite(string_t *this, int fd) {$/;"	f	typeref:typename:void
Vector	src/Aarya/vector.h	/^typedef struct Vector {$/;"	s
Vector	src/Aarya/vector.h	/^} Vector;$/;"	t	typeref:struct:Vector
Vector_alloc	src/Aarya/vector.c	/^Vector *Vector_alloc(elem_copy_type elem_copy, elem_free_type elem_free) {$/;"	f	typeref:typename:Vector *
Vector_at	src/Aarya/vector.c	/^void *Vector_at(Vector *this, size_t index) {$/;"	f	typeref:typename:void *
Vector_clear	src/Aarya/vector.c	/^Vector *Vector_clear(Vector *this) {$/;"	f	typeref:typename:Vector *
Vector_contains	src/Aarya/vector.c	/^bool Vector_contains(Vector *this, const void *target,$/;"	f	typeref:typename:bool
Vector_filter	src/Aarya/vector.c	/^Vector *Vector_filter(Vector *this, elem_filter_type filter) {$/;"	f	typeref:typename:Vector *
Vector_foreach	src/Aarya/vector.c	/^void Vector_foreach(Vector *this, void (*callback)(void *elem_ptr)) {$/;"	f	typeref:typename:void
Vector_free	src/Aarya/vector.c	/^void Vector_free(Vector *this) {$/;"	f	typeref:typename:void
Vector_push	src/Aarya/vector.c	/^void Vector_push(Vector *this, void *elem) {$/;"	f	typeref:typename:void
Vector_remove	src/Aarya/vector.c	/^void Vector_remove(Vector *this, size_t index, void **elem_out) {$/;"	f	typeref:typename:void
Vector_reserve	src/Aarya/vector.c	/^void Vector_reserve(Vector *this, size_t capacity) {$/;"	f	typeref:typename:void
Vector_size	src/Aarya/vector.c	/^size_t Vector_size(Vector *this) {$/;"	f	typeref:typename:size_t
_GetCapacity	src/Aarya/astring.c	/^size_t _GetCapacity(size_t n) {$/;"	f	typeref:typename:size_t
__FILENAME__	src/Aarya/log.h	/^#define __FILENAME__ /;"	d
__LOG_h__	src/Aarya/log.h	/^#define __LOG_h__$/;"	d
_align_capacity	src/Aarya/common.c	/^size_t _align_capacity(size_t capacity) {$/;"	f	typeref:typename:size_t
all	Makefile	/^all: main files_test$/;"	t
buffer	src/Aarya/astring.h	/^  char *buffer;$/;"	m	struct:string_t	typeref:typename:char *
capacity	src/Aarya/astring.h	/^  size_t capacity;$/;"	m	struct:string_t	typeref:typename:size_t
capacity	src/Aarya/hashtable.h	/^	size_t capacity;$/;"	m	struct:Hashtable	typeref:typename:size_t
capacity	src/Aarya/vector.h	/^  size_t capacity;$/;"	m	struct:Vector	typeref:typename:size_t
char_compare	src/Aarya/common.c	/^int char_compare(const void *char_ptr_1, const void *char_ptr_2) {$/;"	f	typeref:typename:int
char_copy	src/Aarya/common.c	/^void *char_copy(void *char_ptr) {$/;"	f	typeref:typename:void *
char_to_string	src/Aarya/common.c	/^char *char_to_string(void *char_ptr) {$/;"	f	typeref:typename:char *
check_and_rename_files	src/main.c	/^void check_and_rename_files(const char *tmpfile, char **filenames,$/;"	f	typeref:typename:void
clean	Makefile	/^clean:$/;"	t
clean_errno	src/Aarya/log.h	/^#define clean_errno(/;"	d
double_compare	src/Aarya/common.c	/^int double_compare(const void *double_ptr_1, const void *double_ptr_2) {$/;"	f	typeref:typename:int
double_copy	src/Aarya/common.c	/^void *double_copy(void *double_ptr) {$/;"	f	typeref:typename:void *
double_to_string	src/Aarya/common.c	/^char *double_to_string(void *double_ptr) {$/;"	f	typeref:typename:char *
elem_callback_type	src/Aarya/common.h	/^typedef void (*elem_callback_type)(void *elem_ptr);$/;"	t	typeref:typename:void (*)(void * elem_ptr)
elem_compare_type	src/Aarya/common.h	/^typedef int (*elem_compare_type)(const void *elem_ptr_1,$/;"	t	typeref:typename:int (*)(const void * elem_ptr_1,const void * elem_ptr_2)
elem_copy	src/Aarya/vector.h	/^  elem_copy_type elem_copy;$/;"	m	struct:Vector	typeref:typename:elem_copy_type
elem_copy_type	src/Aarya/common.h	/^typedef void *(*elem_copy_type)(void *elem_ptr);$/;"	t	typeref:typename:void * (*)(void * elem_ptr)
elem_filter_type	src/Aarya/common.h	/^typedef bool (*elem_filter_type)(void *elem_ptr);$/;"	t	typeref:typename:bool (*)(void * elem_ptr)
elem_free	src/Aarya/vector.h	/^  elem_free_type elem_free;$/;"	m	struct:Vector	typeref:typename:elem_free_type
elem_free_type	src/Aarya/common.h	/^typedef void (*elem_free_type)(void *elem_ptr);$/;"	t	typeref:typename:void (*)(void * elem_ptr)
elem_hash_type	src/Aarya/common.h	/^typedef size_t (*elem_hash_type)(void *elem_ptr);$/;"	t	typeref:typename:size_t (*)(void * elem_ptr)
elem_to_string_type	src/Aarya/common.h	/^typedef char *(*elem_to_string_type)(void *elem_ptr);$/;"	t	typeref:typename:char * (*)(void * elem_ptr)
elems	src/Aarya/vector.h	/^  void **elems;$/;"	m	struct:Vector	typeref:typename:void **
files_test	Makefile	/^files_test: $(OBJDIR)\/files_test.o $(OBJ)$/;"	t
float_compare	src/Aarya/common.c	/^int float_compare(const void *float_ptr_1, const void *float_ptr_2) {$/;"	f	typeref:typename:int
float_copy	src/Aarya/common.c	/^void *float_copy(void *float_ptr) {$/;"	f	typeref:typename:void *
float_to_string	src/Aarya/common.c	/^char *float_to_string(void *float_ptr) {$/;"	f	typeref:typename:char *
fnv_hash	src/Aarya/hashtable.c	/^uint32_t fnv_hash(const void *key, size_t len) {$/;"	f	typeref:typename:uint32_t
hash	src/Aarya/hashtable.h	/^	elem_hash_type hash;$/;"	m	struct:Hashtable	typeref:typename:elem_hash_type
hashtable	src/Aarya/hashtable.h	/^	Hashtable *hashtable;$/;"	m	struct:HashtableIter	typeref:typename:Hashtable *
ht_alloc	src/Aarya/hashtable.c	/^Hashtable *ht_alloc(elem_copy_type key_copy, elem_free_type key_free,$/;"	f	typeref:typename:Hashtable *
ht_alloc_int_to_shallow	src/Aarya/hashtable.c	/^Hashtable *ht_alloc_int_to_shallow() {$/;"	f	typeref:typename:Hashtable *
ht_alloc_string_to_shallow	src/Aarya/hashtable.c	/^Hashtable *ht_alloc_string_to_shallow() {$/;"	f	typeref:typename:Hashtable *
ht_capacity	src/Aarya/hashtable.c	/^size_t ht_capacity(Hashtable *this) { return this->capacity; }$/;"	f	typeref:typename:size_t
ht_contains	src/Aarya/hashtable.c	/^bool ht_contains(Hashtable *this, const void *key) {$/;"	f	typeref:typename:bool
ht_find	src/Aarya/hashtable.c	/^HTNode *ht_find(Hashtable *this, const void *key) {$/;"	f	typeref:typename:HTNode *
ht_foreach	src/Aarya/hashtable.c	/^void ht_foreach(Hashtable *this, void (*callback)(void *key, void *value)) {$/;"	f	typeref:typename:void
ht_free	src/Aarya/hashtable.c	/^void ht_free(Hashtable *this) {$/;"	f	typeref:typename:void
ht_get	src/Aarya/hashtable.c	/^void *ht_get(Hashtable *this, const void *key) {$/;"	f	typeref:typename:void *
ht_iter_init	src/Aarya/hashtable.c	/^void ht_iter_init(HashtableIter *itr, Hashtable *ht) {$/;"	f	typeref:typename:void
ht_iter_next	src/Aarya/hashtable.c	/^bool ht_iter_next(HashtableIter *itr, void **key_out, void **value_out) {$/;"	f	typeref:typename:bool
ht_node_free	src/Aarya/hashtable.c	/^void ht_node_free(Hashtable *this, HTNode *node, void **key_out,$/;"	f	typeref:typename:void
ht_remove	src/Aarya/hashtable.c	/^bool ht_remove(Hashtable *this, const void *key, void **key_out,$/;"	f	typeref:typename:bool
ht_set	src/Aarya/hashtable.c	/^void ht_set(Hashtable *this, void *key, void *value) {$/;"	f	typeref:typename:void
ht_size	src/Aarya/hashtable.c	/^size_t ht_size(Hashtable *this) { return this->size; }$/;"	f	typeref:typename:size_t
index	src/Aarya/hashtable.h	/^	size_t index;$/;"	m	struct:HashtableIter	typeref:typename:size_t
int_compare	src/Aarya/common.c	/^int int_compare(const void *int_ptr_1, const void *int_ptr_2) {$/;"	f	typeref:typename:int
int_copy	src/Aarya/common.c	/^void *int_copy(void *int_ptr) {$/;"	f	typeref:typename:void *
int_hash	src/Aarya/hashtable.c	/^size_t int_hash(void *int_ptr) { return *(int *)int_ptr; }$/;"	f	typeref:typename:size_t
int_to_string	src/Aarya/common.c	/^char *int_to_string(void *int_ptr) {$/;"	f	typeref:typename:char *
jenkins_hash	src/Aarya/hashtable.c	/^uint32_t jenkins_hash(const void *key, size_t len) {$/;"	f	typeref:typename:uint32_t
join	src/Aarya/files.c	/^char *join(Vector *vector) {$/;"	f	typeref:typename:char *
key	src/Aarya/hashtable.h	/^	void *key;$/;"	m	struct:HTNode	typeref:typename:void *
key_compare	src/Aarya/hashtable.h	/^	elem_compare_type key_compare;$/;"	m	struct:Hashtable	typeref:typename:elem_compare_type
key_copy	src/Aarya/hashtable.h	/^	elem_copy_type key_copy;$/;"	m	struct:Hashtable	typeref:typename:elem_copy_type
key_free	src/Aarya/hashtable.h	/^	elem_free_type key_free;$/;"	m	struct:Hashtable	typeref:typename:elem_free_type
log_debug	src/Aarya/log.h	/^  #define log_debug(/;"	d
log_debug	src/Aarya/log.h	/^#define log_debug(/;"	d
log_error	src/Aarya/log.h	/^  #define log_error(/;"	d
log_error	src/Aarya/log.h	/^#define log_error(/;"	d
log_info	src/Aarya/log.h	/^  #define log_info(/;"	d
log_info	src/Aarya/log.h	/^#define log_info(/;"	d
log_warn	src/Aarya/log.h	/^  #define log_warn(/;"	d
log_warn	src/Aarya/log.h	/^#define log_warn(/;"	d
long_compare	src/Aarya/common.c	/^int long_compare(const void *long_ptr_1, const void *long_ptr_2) {$/;"	f	typeref:typename:int
long_copy	src/Aarya/common.c	/^void *long_copy(void *long_ptr) {$/;"	f	typeref:typename:void *
long_to_string	src/Aarya/common.c	/^char *long_to_string(void *long_ptr) {$/;"	f	typeref:typename:char *
main	Makefile	/^main: $(OBJDIR)\/main.o $(OBJ)$/;"	t
main	src/files_test.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	src/main.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
make_string	src/Aarya/common.c	/^char *make_string(char *format, ...) {$/;"	f	typeref:typename:char *
memcheck	Makefile	/^memcheck:$/;"	t
mkdirs	src/Aarya/files.c	/^void mkdirs(char *filepath) {$/;"	f	typeref:typename:void
next	src/Aarya/hashtable.h	/^	struct HTNode *next;$/;"	m	struct:HTNode	typeref:struct:HTNode *
node	src/Aarya/hashtable.h	/^	HTNode *node;$/;"	m	struct:HashtableIter	typeref:typename:HTNode *
resolve_path	src/Aarya/files.c	/^char *resolve_path(char *path) {$/;"	f	typeref:typename:char *
resolve_path_helper	src/Aarya/files.c	/^void resolve_path_helper(Vector *vector, char *name) {$/;"	f	typeref:typename:void
rstrstr	src/Aarya/common.c	/^char *rstrstr(char *string, char *pattern) {$/;"	f	typeref:typename:char *
seed	src/Aarya/hashtable.h	/^	unsigned int seed;$/;"	m	struct:Hashtable	typeref:typename:unsigned int
shallow_compare	src/Aarya/common.c	/^int shallow_compare(const void *elem_ptr_1, const void *elem_ptr_2) {$/;"	f	typeref:typename:int
shallow_copy	src/Aarya/common.c	/^void *shallow_copy(void *elem_ptr) { return elem_ptr; }$/;"	f	typeref:typename:void *
shallow_free	src/Aarya/common.c	/^void shallow_free(void *elem_ptr) { (void)elem_ptr; }$/;"	f	typeref:typename:void
shallow_to_string	src/Aarya/common.c	/^char *shallow_to_string(void *elem_ptr) { return make_string("%p", elem_ptr); }$/;"	f	typeref:typename:char *
size	src/Aarya/astring.h	/^  size_t size;$/;"	m	struct:string_t	typeref:typename:size_t
size	src/Aarya/hashtable.h	/^	size_t size;$/;"	m	struct:Hashtable	typeref:typename:size_t
size	src/Aarya/vector.h	/^  size_t size;$/;"	m	struct:Vector	typeref:typename:size_t
start	src/Aarya/hashtable.h	/^	bool start;$/;"	m	struct:HashtableIter	typeref:typename:bool
string_compare	src/Aarya/common.h	/^#define string_compare /;"	d
string_copy	src/Aarya/common.h	/^#define string_copy /;"	d
string_hash	src/Aarya/hashtable.c	/^size_t string_hash(void *str_ptr) {$/;"	f	typeref:typename:size_t
string_t	src/Aarya/astring.h	/^typedef struct string_t {$/;"	s
string_t	src/Aarya/astring.h	/^} string_t;$/;"	t	typeref:struct:string_t
table	src/Aarya/hashtable.h	/^	HTNode **table;$/;"	m	struct:Hashtable	typeref:typename:HTNode **
test_mkdirs	src/files_test.c	/^int test_mkdirs() {$/;"	f	typeref:typename:int
test_resolve_path	src/files_test.c	/^int test_resolve_path() {$/;"	f	typeref:typename:int
test_resolve_path_helper	src/files_test.c	/^void test_resolve_path_helper(char *path, char *expected) {$/;"	f	typeref:typename:void
tests_passed	src/files_test.c	/^int tests_passed = 0;$/;"	v	typeref:typename:int
tests_total	src/files_test.c	/^int tests_total = 0;$/;"	v	typeref:typename:int
trimwhitespace	src/Aarya/common.c	/^char *trimwhitespace(char *str) {$/;"	f	typeref:typename:char *
value	src/Aarya/hashtable.h	/^	void *value;$/;"	m	struct:HTNode	typeref:typename:void *
value_copy	src/Aarya/hashtable.h	/^	elem_copy_type value_copy;$/;"	m	struct:Hashtable	typeref:typename:elem_copy_type
value_free	src/Aarya/hashtable.h	/^	elem_free_type value_free;$/;"	m	struct:Hashtable	typeref:typename:elem_free_type
wrap_with_quotes	src/Aarya/astring.c	/^string_t *wrap_with_quotes(char *str) {$/;"	f	typeref:typename:string_t *
xfree	src/Aarya/common.h	/^#define xfree(/;"	d
